---
title: ""
format: 
  html:
    include-in-header:
      - text: |
          <script src="https://cdn.plot.ly/plotly-2.26.0.min.js"></script>
          <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin=""/>
          <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
          integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
          crossorigin=""></script>
bibliography: references.bib
---

```{r echo=FALSE}

# download and unzip the data first:
# https://api.worldbank.org/v2/en/indicator/VC.IHR.PSRC.P5?downloadformat=csv

# read and format data as a table
data <- read.csv("data/API_VC.IHR.PSRC.P5_DS2_en_csv_v2_57.csv", header = FALSE, comment.char = "#")
date_updated <- as.Date(data[2, 2])
data <- data[-c(1:2),]
names(data) <- unlist(c(data[1, ]))
data <- data[-1,]
names(data) <- tolower(sub("[[:space:]]", "_", names(data)))

# filter data based on country and year
data <- data[data$country_name %in% c("France", "Germany", "Italy", "Spain", "United Kingdom"), ]
data <- data[order(data$country_name),]
data <- data[, !names(data) %in% as.character(1950:1991)]
for (col_nb in ncol(data):1) {
  if (sum(is.na(data[[col_nb]])) == nrow(data)) {
    data[, col_nb] <- NULL
  }
}

# transpose data to ease manipulation in ojs 
row.names(data) <- data$country_name
data_transpose <- as.data.frame(t(data[, -c(1:4)]))
data_transpose$year <- rownames(data_transpose)
rownames(data_transpose) <- NULL

# pass data to ojs
ojs_define(data = data_transpose)
```

```{r}
#| echo: false

# create a colour gradient
start_color <- "#cfedfB"
end_color <- "#4d739e"
colour_gradient <- colorRampPalette(c(start_color, end_color))(5)

country_codes <- c("ALB", "AND", "AUT", "BEL", "BGR", "BIH", "BLR", "CHE", "CYP",  
"CZE", "DEU", "DNK", "ESP", "EST", "FIN", "FRA", "FRO", "GBR", "GRC", 
"HRV", "HUN", "IMN", "IRL", "ISL", "ITA", "KOS", "LIE", "LTU", "LUX", 
"LVA", "MCO", "MDA", "MKD", "MLT", "MNE", "NLD", "NOR", "POL", 
"PRT", "ROU", "RUS", "SMR", "SRB", "SVK", "SVN", "SWE", "UKR"
)

data_colour <- data.frame(t(sample(x = colour_gradient, 
                                   size = length(country_codes), 
                                   replace = T)))
names(data_colour) <- country_codes

ojs_define(data_colour = data_colour)
```

::: {.panel-tabset}

## Lines

```{ojs}
//| echo: false

plot2 = {
  const traces = Object.keys(data).filter(key => key !== 'year').map(group => ({
    x: data.year,
    y: data[group],
    type: 'scatter',
    mode: 'lines',
    name: group
  }));

  const layout = {
    // title: 'Number of intentional homicides in some western European countries (per 100.000 people)',
    title: {
      text: '<b>Number of intentional homicides in several Western <br> European countries (per 100.000 people)</b>',
      font: {
        size: 18
      }
    },
    xaxis: {title: 'year'},
    yaxis: {title: 'number of homicides (per 100.000)'},
  };

  let div = DOM.element('div');
  Plotly.newPlot(div, traces, layout);
  return div;
}
```

## Map

```{ojs}
///| panel: fill

mapContainer = html`<div id="map" style="height: 400px; width: 100%;"></div>`

map = {
  // Initialize the map with disabled zoom and drag options
  let m = L.map(mapContainer, {
    center: [50.0, 15.0],
    zoom: 3,
    zoomControl: false,
    dragging: false,
    doubleClickZoom: false,
    scrollWheelZoom: false,
    touchZoom: false,
    boxZoom: false
  });
  
  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Â© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
  }).addTo(m);
  
  return m;
}

// This cell will trigger the map to resize and reposition itself
mapReady = {
  requestAnimationFrame(() => {
    map.invalidateSize();
  });
  return true;
}

// Display the map container
mapContainer


```

## Map2

```{ojs}
// First, load the GeoJSON data
europeData = await fetch('geojson/europe3.geo.json').then(response => response.json())

// Create the map container
mapContainer2 = html`<div id="map2" style="height: 400px; width: 100%;"></div>`

// Initialize the map
map2 = {
  // Create the map object
  let m = L.map(mapContainer2, {
    center: [50.0, 15.0],
    zoom: 3.5,
    minZoom: 3.5,
    maxZoom: 3.5,
    dragging: false,
    zoomControl: false,
    scrollWheelZoom: false,
    doubleClickZoom: false,
    touchZoom: false,
    boxZoom: false
  });

const customTooltipPositions = {
  'Croatia': [46, 16.5],
  'Denmark': [56, 9],
  'Russia': [55, 37],
  'Norway': [60, 9],
  'Sweden': [58, 15],
  'Finland': [61, 25],
  'France': [48, 2],
  'Netherlands': [52, 5],
  'Portugal': [40, -8],
  'Spain': [40, -3]
};

// Add the GeoJSON layer with hover functionality
  L.geoJSON(europeData, {
    style: function(feature) {
    
      const countryName = feature.properties.adm0_a3;
      const countryColour = data_colour[countryName] || '#ffff00';
    
      return {
        color: '#000',
        weight: 1,
        fillColor: countryColour,
        fillOpacity: 0.7
      };
    },
    onEachFeature: function(feature, layer) {
      layer.on({
        mouseover: function(e) {
          let layer = e.target;

          let tooltipPosition;
          if (customTooltipPositions[feature.properties.sovereignt]) {
            tooltipPosition = L.latLng(customTooltipPositions[feature.properties.sovereignt]);
          } else {
            tooltipPosition = layer.getBounds().getCenter();
          }
          
          layer.bindTooltip(feature.properties.sovereignt).openTooltip(tooltipPosition);
        },
        mouseout: function(e) {
          layer.unbindTooltip();
        }
      });
    }
  }).addTo(m);

  // Set max bounds
  m.setMaxBounds(m.getBounds());
  
  return m;
}

// Display the map
mapContainer2

```

:::

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Select all tab links
  var tabLinks = document.querySelectorAll('a[data-bs-toggle="tab"]');
  
  // Add click event listener to each tab link
  tabLinks.forEach(function(tabLink) {
    tabLink.addEventListener('shown.bs.tab', function (event) {
      // Check if the map exists and has the invalidateSize method
      if (typeof map !== 'undefined' && typeof map.invalidateSize === 'function') {
        console.log("it works!");
        setTimeout(function() {
          map.invalidateSize();
        }, 100);
      }
    });
  });
});
</script>

Data come from the World Bank [@WorldBank_homicides] (last update: `r format(date_updated, "%b. %Y")`).  
The geographic data was made available by Ash Kyd [@kyd_geojson_2023].

