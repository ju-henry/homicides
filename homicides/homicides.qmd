---
title: ""
format: 
  html:
    include-in-header:
      - text: |
          <script src="https://cdn.plot.ly/plotly-2.26.0.min.js"></script>
          <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin=""/>
          <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
          integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
          crossorigin=""></script>
bibliography: references.bib
---

```{r echo=FALSE}

# download and unzip the data first:
# https://api.worldbank.org/v2/en/indicator/VC.IHR.PSRC.P5?downloadformat=csv

# read and format data as a table
data <- read.csv("data/API_VC.IHR.PSRC.P5_DS2_en_csv_v2_57.csv", header = FALSE, comment.char = "#")
date_updated <- as.Date(data[2, 2])
data <- data[-c(1:2),]
names(data) <- unlist(c(data[1, ]))
data <- data[-1,]
names(data) <- tolower(sub("[[:space:]]", "_", names(data)))

# filter data based on country and year
data <- data[data$country_name %in% c("France", "Germany", "Italy", "Spain", "United Kingdom"), ]
data <- data[order(data$country_name),]
data <- data[, !names(data) %in% as.character(1950:1991)]
for (col_nb in ncol(data):1) {
  if (sum(is.na(data[[col_nb]])) == nrow(data)) {
    data[, col_nb] <- NULL
  }
}

# transpose data to ease manipulation in ojs 
row.names(data) <- data$country_name
data_transpose <- as.data.frame(t(data[, -c(1:4)]))
data_transpose$year <- rownames(data_transpose)
rownames(data_transpose) <- NULL

# pass data to ojs
ojs_define(data = data_transpose)
```

::: {.panel-tabset}

## Lines

```{ojs}
//| echo: false

plot2 = {
  const traces = Object.keys(data).filter(key => key !== 'year').map(group => ({
    x: data.year,
    y: data[group],
    type: 'scatter',
    mode: 'lines',
    name: group
  }));

  const layout = {
    // title: 'Number of intentional homicides in some western European countries (per 100.000 people)',
    title: {
      text: '<b>Number of intentional homicides in several Western <br> European countries (per 100.000 people)</b>',
      font: {
        size: 18
      }
    },
    xaxis: {title: 'year'},
    yaxis: {title: 'number of homicides (per 100.000)'},
  };

  let div = DOM.element('div');
  Plotly.newPlot(div, traces, layout);
  return div;
}
```

## Map

```{ojs}
//| panel: input

viewof year = Inputs.range([2000, 2025],
  {step: 1, value: 2000, label: "Select Year"}
)
```

```{ojs}
//| panel: fill

// Load required libraries
// L = require('leaflet@1.9.4')
d3 = require('d3@7')

// Fix for missing marker icons
// L.Icon.Default.mergeOptions({
//   iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
//   shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'
// });

// Sample data (replace with your actual data)
data2 = {
  const years = d3.range(2000, 2026);
  return years.map(year => ({
    year,
    lat: 40 + Math.random() * 10,
    lon: -100 + Math.random() * 50,
    value: Math.round(Math.random() * 100)
  }));
}

// Create the map only once
mapContainer = {
  const container = html`<div id="map" style="height:400px;"></div>`;
  container.map = L.map(container).setView([51.505, -0.09], 13);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(container.map);
  return container;
}

// Update markers based on the selected year
// {
  // const map = mapContainer.map;
  
  // Clear existing markers
  // map.eachLayer(layer => {
  //   if (layer instanceof L.Marker) {
  //     map.removeLayer(layer);
  //   }
  // });
  
  // Add new markers for the selected year
  // data2.filter(d => d.year === year).forEach(d => {
  //   L.marker([d.lat, d.lon])
  //     .addTo(map)
  //     .bindPopup(`Year: ${d.year}<br>Value: ${d.value}`);
  // });
  
  // Return null to prevent unwanted output
  // return null;
// }
```

:::

Data come from the World Bank [@WorldBank_homicides] (last update: `r format(date_updated, "%b. %Y")`).

