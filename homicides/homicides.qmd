---
title: ""
format: 
  html:
    include-in-header:
      - text: |
          <script src="https://cdn.plot.ly/plotly-2.26.0.min.js"></script>
          <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin=""/>
          <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
          integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
          crossorigin=""></script>
bibliography: references.bib
css: homicides.css
---

```{r echo=FALSE}

# download and unzip the data first:
# https://api.worldbank.org/v2/en/indicator/VC.IHR.PSRC.P5?downloadformat=csv

# read and format data as a table
data <- read.csv("data/API_VC.IHR.PSRC.P5_DS2_en_csv_v2_57.csv", header = FALSE, comment.char = "#")
date_updated <- as.Date(data[2, 2])
data <- data[-c(1:2),]
names(data) <- unlist(c(data[1, ]))
data <- data[-1,]
names(data) <- tolower(sub("[[:space:]]", "_", names(data)))

country_codes <- c("ALB", "AND", "AUT", "BEL", "BGR", "BIH", "BLR", "CHE", "CYP",  
"CZE", "DEU", "DNK", "ESP", "EST", "FIN", "FRA", "FRO", "GBR", "GRC", 
"HRV", "HUN", "IMN", "IRL", "ISL", "ITA", "KOS", "LIE", "LTU", "LUX", 
"LVA", "MCO", "MDA", "MKD", "MLT", "MNE", "NLD", "NOR", "POL", 
"PRT", "ROU", "RUS", "SMR", "SRB", "SVK", "SVN", "SWE", "UKR"
)
# Correct country_code for Kosovo
data$country_code[data$country_name == "Kosovo"] <- "KOS"

# filter data based on country and year
data <- data[data$country_code %in% country_codes, ]
data <- data[order(data$country_name),]
data <- data[, !names(data) %in% as.character(1950:1991)]
for (col_nb in ncol(data):1) {
  if (sum(is.na(data[[col_nb]])) == nrow(data)) {
    data[, col_nb] <- NULL
  }
}

# round values to two digits
for (i in c(5:ncol(data))) {
  data[, i] <- round(data[, i], 2)
}

# compute quantiles to colour countries
data_q <- round(quantile(c(as.matrix(data[, 5:ncol(data)])), c(0.2, 0.4, 0.6, 0.8), na.rm = T), 1)

# transpose data to ease manipulation in ojs 
row.names(data) <- data$country_name
data_transpose <- as.data.frame(t(data[, -c(1:4)]))
data_transpose$year <- rownames(data_transpose)
data_transpose$year <- as.integer(data_transpose$year)
rownames(data_transpose) <- NULL

# pass data to ojs
ojs_define(data = data_transpose, data_q = data_q, data_codes = data$country_code, data_names = data$country_name)
```

```{r}
#| echo: false

# create a colour gradient
start_color <- "#cfedfB"
end_color <- "#4d739e"
colour_gradient <- colorRampPalette(c(start_color, end_color))(5)

ojs_define(colour_gradient = colour_gradient)
```

<h2>Intentional homicides in Europe (per 100,000 people)</h2>

::: {.panel-tabset}

## Lines

```{ojs}
//| echo: false

plot2 = {
  const traces = Object.keys(data).filter(key => key !== 'year').map(group => ({
    x: data.year,
    y: data[group],
    type: 'scatter',
    mode: 'lines',
    name: group,
    visible: ['Austria', 'France', 'Germany', 'Italy'].includes(group) ? true : 'legendonly'
  }));

  const layout = {
    xaxis: {title: 'year'},
    yaxis: {title: 'number of homicides (per 100.000)',
            range: [0, null]},
    margin: {t: 25, b: 40},
    responsive: true
    //width: 750
  };


  //let div = DOM.element('div');
  let div = DOM.element('div', { className: 'plot-container' });
  // Render the chart
  Plotly.newPlot(div, traces, layout);

  // Function to handle resizing
  function resizePlot() {
    Plotly.Plots.resize(div); // Trigger Plotly's resize method
  }

  // Add a resize event listener for the window
  window.addEventListener('resize', resizePlot);

  // Trigger a resize after a short delay when the page loads (to handle mobile-specific issues)
  setTimeout(resizePlot, 500);
  
  return div;
}
```

## Map

```{ojs}
//| echo: false

// Load GeoJSON data (unchanged)
europeData0 = await fetch('geojson/europe3.geo.json').then(response => response.json())
europeData = {
  let geodata = europeData0;
  geodata.features[1].geometry.coordinates.push(geodata.features[50].geometry.coordinates[100]);
  geodata.features[50].geometry.coordinates.pop();
  return geodata;
}

// Create the map container with responsive sizing
mapContainer2 = html`<div id="map-wrapper" style="position: relative; width: 100%; padding-bottom: 75%;">
                       <div id="map2" style="position: absolute; top: 0; bottom: 0; left: 0; right: 0;"></div>
                     </div>`

// Initialize the map
map2 = {
  // Function to determine appropriate center and zoom based on screen width
  function getMapSettings() {
    const width = window.innerWidth;
    if (width < 550) {
      return { center: [54.5, 15.0], zoom: 2 };
    } else if (width < 768) {
      return { center: [54.5, 15.0], zoom: 2.5 };
    } else if (width < 1024) {
      return { center: [52.0, 15.0], zoom: 3 };
    } else {
      return { center: [52.0, 15.0], zoom: 3.5 };
    }
  }

  let settings = getMapSettings();
  
  let m = L.map('map2', {
    center: settings.center,
    zoom: settings.zoom,
    minZoom: 2,
    maxZoom: 3.5,
    dragging: false,
    zoomControl: false,
    scrollWheelZoom: false,
    doubleClickZoom: false,
    touchZoom: false,
    boxZoom: false,
    keyboard: false,
    tap: false,
    interactive: false
  });

  // Function to update map view
  function updateMapView() {
    let newSettings = getMapSettings();
    m.setView(newSettings.center, newSettings.zoom, { animate: false });
    m.invalidateSize({ pan: false });
  }

  // Initial update
  updateMapView();

  // Add resize event listener
  window.addEventListener('resize', () => {
    setTimeout(updateMapView, 0);
  });
  
  return m;
}

```

```{ojs}
//| echo: false
//| output: false

customTooltipPositions = ({
  'Croatia': [46, 16.5],
  'Denmark': [56, 9],
  'Faroe Islands': [62.2, -7],
  'Russia': [55, 37],
  'Norway': [60, 9],
  'Sweden': [58, 15],
  'Finland': [61, 25],
  'France': [48, 2],
  'Iceland': [64, -19],
  'Netherlands': [52, 5],
  'Portugal': [40, -8],
  'Spain': [40, -3]
});

// Create a custom tooltip element
tooltip = L.DomUtil.create('div', 'custom-tooltip');
tooltip.style.display = 'none'; // Initially hidden
map2.getContainer().appendChild(tooltip);

// Add the GeoJSON layer with hover functionality
L.geoJSON(europeData, {
  style: function(feature) {

    const countryCode = feature.properties.adm0_a3;
    const countryIndex = data_codes.indexOf(countryCode);
    const yearIndex = data["year"].indexOf(year);

    let countryValue = null;
    if (countryIndex >= 0) {
      countryValue = data[data_names[countryIndex]][yearIndex];
    }

    let countryColour = '#ffff00';
    if (countryValue === null) {
      countryColour = '#ffff00';
    } else if (countryValue <= data_q[0]) {
      countryColour = colour_gradient[0];
    } else if (countryValue > data_q[0] && countryValue <= data_q[1]) {
      countryColour = colour_gradient[1];
    } else if (countryValue > data_q[1] && countryValue <= data_q[2]) {
      countryColour = colour_gradient[2];
    } else if (countryValue > data_q[2] && countryValue <= data_q[3]) {
      countryColour = colour_gradient[3];
    } else if (countryValue > data_q[3]) {
      countryColour = colour_gradient[4];
    }
    
    return {
      color: '#000',
      weight: 1,
      fillColor: countryColour,
      fillOpacity: 1
    };
  },
  onEachFeature: function(feature, layer) {
    layer.on({
      mouseover: function(e) {
        let layer = e.target;

        let tooltipPosition;
        if (customTooltipPositions[feature.properties.admin]) {
          tooltipPosition = L.latLng(customTooltipPositions[feature.properties.admin]);
        } else {
          tooltipPosition = layer.getBounds().getCenter();
        }

        const countryCode = feature.properties.adm0_a3;
        const countryIndex = data_codes.indexOf(countryCode);
        const yearIndex = data["year"].indexOf(year);

        let countryValue = null;
        if (countryIndex >= 0) {
          countryValue = data[data_names[countryIndex]][yearIndex];
        }
        let countryValueLabel = countryValue;
        if (countryValue === null) {
          countryValueLabel = ["no data"];
        }
        
        // Show the tooltip with custom text
        tooltip.innerHTML = `<strong>${feature.properties.admin}</strong>: ${countryValueLabel}`;
        tooltip.style.display = 'block';

        // Position the tooltip at the fixed coordinates
        const position = map2.latLngToContainerPoint(tooltipPosition);
        tooltip.style.left = `${position.x}px`;
        tooltip.style.top = `${position.y}px`;
        
      },
      mouseout: function(e) {
        tooltip.style.display = 'none';
      }
    });
  }
}).addTo(map2);
```

```{ojs}
//| echo: false
//| output: false

legend = L.control({position: 'bottomright'});

legend.onAdd = function (map) {
    const div = L.DomUtil.create('div', 'info legend');
    const labels = [' < ' + data_q[0], 
                    data_q[0] + ' - ' + data_q[1],
                    data_q[1] + ' - ' + data_q[2],
                    data_q[2] + ' - ' + data_q[3],
                    ' > ' + data_q[3],
                    'No data'
                   ];
    
    div.innerHTML += '';
    
    for (let i = 0; i < labels.length; i++) {
        div.innerHTML +=
            '<div class="legend-item">' +
            '<i style="background:' + (i === labels.length - 1 ? '#ffff00' : colour_gradient[i]) + '"></i> ' +
            labels[i] + (labels[i + 1] ? '<br>' : '') +
            '</div>';
    }
    
    return div;
};

legend.addTo(map2);

```

```{ojs}
//| echo: false

minYear = Math.min(...data.year);
maxYear = Math.max(...data.year);

function createCustomSlider(initialValue, min, max) {
  const container = document.createElement('div');
  container.className = 'slider-container';

  const leftButton = document.createElement('button');
  leftButton.innerHTML = '&#9668;';
  leftButton.className = 'slider-button';
  leftButton.onclick = () => updateYear(Math.max(min, value - 1));

  const rightButton = document.createElement('button');
  rightButton.innerHTML = '&#9658;';
  rightButton.className = 'slider-button';
  rightButton.onclick = () => updateYear(Math.min(max, value + 1));

  const yearDisplay = document.createElement('span');
  yearDisplay.className = 'year-display';
  yearDisplay.textContent = initialValue;

  const verticalBar = document.createElement('div');
  verticalBar.className = 'vertical-bar';

  const slider = document.createElement('input');
  slider.type = 'range';
  slider.min = min;
  slider.max = max;
  slider.value = initialValue;
  slider.className = 'year-slider';
  slider.oninput = (e) => updateYear(parseInt(e.target.value));
  
  container.appendChild(leftButton);
  container.appendChild(yearDisplay);
  container.appendChild(rightButton);
  container.appendChild(verticalBar);
  container.appendChild(slider);

  let value = initialValue;

  function updateYear(newYear) {
    if (newYear !== value) {
      value = newYear;
      yearDisplay.textContent = newYear;
      slider.value = newYear;
      container.dispatchEvent(new CustomEvent('input', { detail: newYear }));
    }
  }

  Object.defineProperty(container, 'value', {
    get: () => value,
    set: (newValue) => {
      if (newValue !== value) {
        updateYear(newValue);
      }
    }
  });

  return container;
}

viewof selectedYear = createCustomSlider(1992, minYear, maxYear)

year = selectedYear

```

```{ojs}
//| echo: false
//| output: false

document.addEventListener('shown.bs.tab', function (event) {
  if (event.target.textContent.trim() === 'Map') {
    map2.invalidateSize();
  }
});
```

:::

The data comes from the World Bank [@WorldBank_homicides] (last update: `r format(date_updated, "%b. %Y")`).  
The geographic data was made available by Ash Kyd [@kyd_geojson_2023].

