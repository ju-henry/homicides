---
title: ""
format: 
  html:
    include-in-header:
      - text: |
          <script src="https://cdn.plot.ly/plotly-2.26.0.min.js"></script>
          <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin=""/>
          <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
          integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
          crossorigin=""></script>
bibliography: references.bib
---

```{r echo=FALSE}

# download and unzip the data first:
# https://api.worldbank.org/v2/en/indicator/VC.IHR.PSRC.P5?downloadformat=csv

# read and format data as a table
data <- read.csv("data/API_VC.IHR.PSRC.P5_DS2_en_csv_v2_57.csv", header = FALSE, comment.char = "#")
date_updated <- as.Date(data[2, 2])
data <- data[-c(1:2),]
names(data) <- unlist(c(data[1, ]))
data <- data[-1,]
names(data) <- tolower(sub("[[:space:]]", "_", names(data)))

country_codes <- c("ALB", "AND", "AUT", "BEL", "BGR", "BIH", "BLR", "CHE", "CYP",  
"CZE", "DEU", "DNK", "ESP", "EST", "FIN", "FRA", "FRO", "GBR", "GRC", 
"HRV", "HUN", "IMN", "IRL", "ISL", "ITA", "KOS", "LIE", "LTU", "LUX", 
"LVA", "MCO", "MDA", "MKD", "MLT", "MNE", "NLD", "NOR", "POL", 
"PRT", "ROU", "RUS", "SMR", "SRB", "SVK", "SVN", "SWE", "UKR"
)
# Correct country_code for Kosovo
data$country_code[data$country_name == "Kosovo"] <- "KOS"

# filter data based on country and year
data <- data[data$country_code %in% country_codes, ]
data <- data[order(data$country_name),]
data <- data[, !names(data) %in% as.character(1950:1991)]
for (col_nb in ncol(data):1) {
  if (sum(is.na(data[[col_nb]])) == nrow(data)) {
    data[, col_nb] <- NULL
  }
}

# transpose data to ease manipulation in ojs 
row.names(data) <- data$country_name
data_transpose <- as.data.frame(t(data[, -c(1:4)]))
data_transpose$year <- rownames(data_transpose)
rownames(data_transpose) <- NULL

# pass data to ojs
ojs_define(data = data_transpose)
```

```{r}
#| echo: false

# create a colour gradient
start_color <- "#cfedfB"
end_color <- "#4d739e"
colour_gradient <- colorRampPalette(c(start_color, end_color))(5)

country_codes <- c("ALB", "AND", "AUT", "BEL", "BGR", "BIH", "BLR", "CHE", "CYP",  
"CZE", "DEU", "DNK", "ESP", "EST", "FIN", "FRA", "FRO", "GBR", "GRC", 
"HRV", "HUN", "IMN", "IRL", "ISL", "ITA", "KOS", "LIE", "LTU", "LUX", 
"LVA", "MCO", "MDA", "MKD", "MLT", "MNE", "NLD", "NOR", "POL", 
"PRT", "ROU", "RUS", "SMR", "SRB", "SVK", "SVN", "SWE", "UKR"
)

data_colour <- data.frame(t(sample(x = colour_gradient, 
                                   size = length(country_codes), 
                                   replace = T)))
names(data_colour) <- country_codes

data_h <- data.frame(t(round(runif(n = length(country_codes)), 2)))
names(data_h) <- country_codes
data_h["FRA"] <- NA_real_
data_h <- rbind(data_h, 1 - data_h)
data_h$year <- c(1992, 1993)

ojs_define(data_colour = data_colour, data_h = data_h, colour_gradient = colour_gradient)
```

::: {.panel-tabset}

## Lines

```{ojs}
//| echo: false

plot2 = {
  const traces = Object.keys(data).filter(key => key !== 'year').map(group => ({
    x: data.year,
    y: data[group],
    type: 'scatter',
    mode: 'lines',
    name: group,
    visible: ['Austria', 'France', 'Germany', 'Italy'].includes(group) ? true : 'legendonly'
  }));

  const layout = {
    // title: 'Number of intentional homicides in some western European countries (per 100.000 people)',
    title: {
      text: '<b>Number of intentional homicides in several Western <br> European countries (per 100.000 people)</b>',
      font: {
        size: 18
      }
    },
    xaxis: {title: 'year'},
    yaxis: {title: 'number of homicides (per 100.000)'},
  };

  let div = DOM.element('div');
  Plotly.newPlot(div, traces, layout);
  return div;
}
```

## Map

```{ojs}
///| panel: fill

mapContainer = html`<div id="map" style="height: 400px; width: 100%;"></div>`

map = {
  // Initialize the map with disabled zoom and drag options
  let m = L.map(mapContainer, {
    center: [50.0, 15.0],
    zoom: 3,
    zoomControl: false,
    dragging: false,
    doubleClickZoom: false,
    scrollWheelZoom: false,
    touchZoom: false,
    boxZoom: false
  });
  
  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Â© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
  }).addTo(m);
  
  return m;
}

// This cell will trigger the map to resize and reposition itself
mapReady = {
  requestAnimationFrame(() => {
    map.invalidateSize();
  });
  return true;
}

// Display the map container
mapContainer


```

## Map2

```{ojs}
//| echo: false

// First, load the GeoJSON data
europeData0 = await fetch('geojson/europe3.geo.json').then(response => response.json())
// Crimea officially belongs to Ukraine
europeData = {
  let geodata = europeData0;
  geodata.features[1].geometry.coordinates.push(geodata.features[50].geometry.coordinates[100]);
  geodata.features[50].geometry.coordinates.pop();
  return geodata;
}

// Create the map container
mapContainer2 = html`<div id="map2" style="height: 400px; width: 100%;"></div>`

// Initialize the map
map2 = {
  // Create the map object
  let m = L.map(mapContainer2, {
    center: [52.0, 15.0],
    zoom: 3.5,
    minZoom: 3.5,
    maxZoom: 3.5,
    dragging: false,
    zoomControl: false,
    scrollWheelZoom: false,
    doubleClickZoom: false,
    touchZoom: false,
    boxZoom: false,
    keyboard: false,
    tap: false,       
    interactive: false
  });
  
  return m;
}

```

```{ojs}
//| echo: false
//| output: false

customTooltipPositions = ({
  'Croatia': [46, 16.5],
  'Denmark': [56, 9],
  'Faroe Islands': [62.2, -7],
  'Russia': [55, 37],
  'Norway': [60, 9],
  'Sweden': [58, 15],
  'Finland': [61, 25],
  'France': [48, 2],
  'Iceland': [64, -19],
  'Netherlands': [52, 5],
  'Portugal': [40, -8],
  'Spain': [40, -3]
});

// Add the GeoJSON layer with hover functionality
L.geoJSON(europeData, {
  style: function(feature) {

    const countryName = feature.properties.adm0_a3;
    const yearIndex = data_h["year"].indexOf(year);

    let countryValue = null;
    if (!["VAT","JEY","GGY","ALD"].includes(countryName)) {
      countryValue = data_h[countryName][yearIndex];
    }

    let countryColour = '#ffff00';
    if (countryValue === null) {
      countryColour = '#ffff00';
    } else if (countryValue >= 0 && countryValue <= 0.2) {
      countryColour = colour_gradient[0];
    } else if (countryValue > 0.2 && countryValue <= 0.4) {
      countryColour = colour_gradient[1];
    } else if (countryValue > 0.4 && countryValue <= 0.6) {
      countryColour = colour_gradient[2];
    } else if (countryValue > 0.6 && countryValue <= 0.8) {
      countryColour = colour_gradient[3];
    } else if (countryValue > 0.8) {
      countryColour = colour_gradient[4];
    }

    return {
      color: '#000',
      weight: 1,
      fillColor: countryColour,
      fillOpacity: 0.7
    };
  },
  onEachFeature: function(feature, layer) {
    layer.on({
      mouseover: function(e) {
        let layer = e.target;

        let tooltipPosition;
        if (customTooltipPositions[feature.properties.admin]) {
          tooltipPosition = L.latLng(customTooltipPositions[feature.properties.admin]);
        } else {
          tooltipPosition = layer.getBounds().getCenter();
        }
        const countryName = feature.properties.adm0_a3;
        const yearIndex = data_h["year"].indexOf(year);

        let countryValue = null;
        if (!["VAT","JEY","GGY","ALD"].includes(countryName)) {
          countryValue = data_h[countryName][yearIndex];
        }
        let countryValueLabel = countryValue;
        if (countryValue === null) {
          countryValueLabel = ["no data"];
        }
        const countryLabel = feature.properties.admin + " : " + countryValueLabel;
        layer.bindTooltip(countryLabel).openTooltip(tooltipPosition);
      },
      mouseout: function(e) {
        layer.unbindTooltip();
      }
    });
  }
}).addTo(map2);
```

```{ojs}
//| echo: false

viewof year = Inputs.range(
  [1992, 1993], 
  {value: 1992, step: 1, label: "Year:"}
)
```

```{ojs}
//| echo: false
//| output: false

document.addEventListener('shown.bs.tab', function (event) {
  if (event.target.textContent.trim() === 'Map2') {
    map2.invalidateSize();
  }
});
```

:::

Data come from the World Bank [@WorldBank_homicides] (last update: `r format(date_updated, "%b. %Y")`).  
The geographic data was made available by Ash Kyd [@kyd_geojson_2023].

